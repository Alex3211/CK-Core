<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActivityMonitorBoundClientMultipleRegister" xml:space="preserve">
    <value>A '{0}' can be registered in only one IActivityMonitor.Output at the same time. Unregister it before Registering it in another monitor.</value>
  </data>
  <data name="ActivityMonitorConcurrentThreadAccess" xml:space="preserve">
    <value>Concurrent accesses from 2 threads to the same ActivityMonitor has been detected. Only one thread at a time can interact with an ActivityMonitor.</value>
  </data>
  <data name="ActivityMonitorErrorWhileGetConclusionText" xml:space="preserve">
    <value>Unexpected error while getting conclusion text: '{0}'.</value>
  </data>
  <data name="ActivityMonitorReentrancyError" xml:space="preserve">
    <value>A reentrant call in an ActivityMonitor has been detected. A monitor usage must not trigger another operation on the same monitor.</value>
  </data>
  <data name="ActivityMonitorReentrancyReleaseError" xml:space="preserve">
    <value>Internal error: Error during release reentrancy operation. Thread id={0} entered whereas release is called from thread '{1}', id={2}.</value>
  </data>
  <data name="ArgumentCountNegative" xml:space="preserve">
    <value>Argument count can not be negative.</value>
  </data>
  <data name="ArgumentMustNotBeNullOrWhiteSpace" xml:space="preserve">
    <value>Argument must not be null or whitespace.</value>
  </data>
  <data name="ClosedByBridgeRemoved" xml:space="preserve">
    <value>Prematurely closed by Bridge removed.</value>
  </data>
  <data name="DateTimeMustBeUtc" xml:space="preserve">
    <value>DateTime must be Utc. Use DateTime.UtcNow to obtain it for instance.</value>
  </data>
  <data name="DirectServicesCanNotBeDisabled" xml:space="preserve">
    <value>Service {0} is direcly supported by the container. It can not be disabled.</value>
  </data>
  <data name="ErrorWhileCollectorRaiseError" xml:space="preserve">
    <value>An error handler raised the error. It has been removed from the CriticalErrorCollector.OnErrorFromBackgroundThreads event.</value>
  </data>
  <data name="ExceptionWhileResolvingType" xml:space="preserve">
    <value>An exception occured while resolving type: {0}.</value>
  </data>
  <data name="ExpectedXmlAttribute" xml:space="preserve">
    <value>Expected attribute '{0}'.</value>
  </data>
  <data name="ExpectedXmlEndElement" xml:space="preserve">
    <value>Expected EndElement token named {0}.</value>
  </data>
  <data name="FactoryTesterMismatch" xml:space="preserve">
    <value>The 'factory' function must create an item that satisfies the 'tester' function.</value>
  </data>
  <data name="FIFOBufferEmpty" xml:space="preserve">
    <value>FIFOBuffer is empty.</value>
  </data>
  <data name="InvalidAssemblyQualifiedName" xml:space="preserve">
    <value>"{0}" is not a valid assembly qualified name.</value>
  </data>
  <data name="PossibleWrongOverloadUseWithException" xml:space="preserve">
    <value>Possible use of the wrong overload: Use the form that takes a first parameter of type Exception and then the string text instead of this ( string format, object arg0, ... ) method to log the exception, or calls this overload explicitely with the Exception.Message string.</value>
  </data>
  <data name="ServiceAlreadyDirectlySupported" xml:space="preserve">
    <value>Service {0} is directly supported by the container.</value>
  </data>
  <data name="ServiceAlreadyRegistered" xml:space="preserve">
    <value>Service {0} is already registered by the container.</value>
  </data>
  <data name="ServiceImplCallbackTypeMismatch" xml:space="preserve">
    <value>Service {0} is not implemented by object {1} returned by the callback.</value>
  </data>
  <data name="ServiceImplTypeMismatch" xml:space="preserve">
    <value>Service {0} is not implemented by object {1}.</value>
  </data>
  <data name="SimpleMultiActionNullAction" xml:space="preserve">
    <value>One of the action is null.</value>
  </data>
  <data name="TraitsMustBelongToTheSameContext" xml:space="preserve">
    <value>Traits must belong to the same context.</value>
  </data>
  <data name="UnregisteredServiceInServiceProvider" xml:space="preserve">
    <value>Unable to find service '{0}'.</value>
  </data>
  <data name="MustBeAMarshalByRefObject" xml:space="preserve">
    <value>refObject Must be a MarshalByRefObject.</value>
  </data>
  <data name="AggregatedExceptionsMustContainAtLeastOne" xml:space="preserve">
    <value>AggregatedExceptions must contain at least one exception.</value>
  </data>
  <data name="InnerExceptionMustBeTheFirstAggregatedException" xml:space="preserve">
    <value>The InnerException must be the first AggregatedExceptions.</value>
  </data>
  <data name="ActivityMonitorTagMustBeRegistered" xml:space="preserve">
    <value>The Tag (CKTrait) must be registered in ActivityMonitor.Tags.</value>
  </data>
  <data name="ActivityMonitorReentrancyCallOnly" xml:space="preserve">
    <value>Only reentrant calls to this method are supported.</value>
  </data>
  <data name="AppSettingsAlreadyInitialized" xml:space="preserve">
    <value>ApplicationSettings have already been initialized.It can be initialized only once.</value>
  </data>
  <data name="AppSettingsDefaultInitializationFailed" xml:space="preserve">
    <value>Unable to initialize AppSettings, the default fallback to System.Configuration.ConfigurationManager.AppSettings can not be generated since System.Configuration assembly is not available.</value>
  </data>
  <data name="AppSettingsRequiredConfigurationBadType" xml:space="preserve">
    <value>Required AppSettings configuration named '{0}' is missising: it must be a '{1}'.</value>
  </data>
  <data name="AppSettingsRequiredConfigurationMissing" xml:space="preserve">
    <value>Required AppSettings configuration named '{0}' is missising.</value>
  </data>
  <data name="ActivityMonitorInvalidLogLevel" xml:space="preserve">
    <value>The level must be a valid level (Trace, Info, Warn, Error or Fatal).</value>
  </data>
  <data name="ActivityMonitorTooMuchDependentStart" xml:space="preserve">
    <value>Dependent token created by Monitor '{0}' at {1} expect at most {2} dependent activitiy(es).</value>
  </data>
  <data name="FileUtilNoReadOnlyWhenCreateFile" xml:space="preserve">
    <value>Access set to FileAccess.Read is stupid when creating a file.</value>
  </data>
  <data name="FileUtilUnableToCreateUniqueTimedFile" xml:space="preserve">
    <value>Unable to create a unique timed file.</value>
  </data>
  <data name="FileMustExist" xml:space="preserve">
    <value>File must exist.</value>
  </data>
  <data name="SystemActivityMonitorRootLogPathSetOnlyOnce" xml:space="preserve">
    <value>SystemActivityMonitor.RootLogPath must be set only once and before any access to it if defined in application config (in the AppSettings section).</value>
  </data>
</root>