//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CK.Core {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CK.Core.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A &apos;{0}&apos; can be registered in only one IActivityMonitor.Output at the same time. Unregister it before Registering it in another monitor..
        /// </summary>
        public static string ActivityMonitorBoundClientMultipleRegister {
            get {
                return ResourceManager.GetString("ActivityMonitorBoundClientMultipleRegister", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Concurrent accesses from 2 threads to the same ActivityMonitor has been detected. Only one thread at a time can interact with an ActivityMonitor..
        /// </summary>
        public static string ActivityMonitorConcurrentThreadAccess {
            get {
                return ResourceManager.GetString("ActivityMonitorConcurrentThreadAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dependent token must have been created with CreateToken( true ) to enable Lauch( token ) to be called later (or CreateTokenWithTopic)..
        /// </summary>
        public static string ActivityMonitorDependentTokenMustBeDelayedLaunch {
            get {
                return ResourceManager.GetString("ActivityMonitorDependentTokenMustBeDelayedLaunch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected error while getting conclusion text: &apos;{0}&apos;..
        /// </summary>
        public static string ActivityMonitorErrorWhileGetConclusionText {
            get {
                return ResourceManager.GetString("ActivityMonitorErrorWhileGetConclusionText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The level must be a valid level (Trace, Info, Warn, Error or Fatal)..
        /// </summary>
        public static string ActivityMonitorInvalidLogLevel {
            get {
                return ResourceManager.GetString("ActivityMonitorInvalidLogLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only reentrant calls to this method are supported..
        /// </summary>
        public static string ActivityMonitorReentrancyCallOnly {
            get {
                return ResourceManager.GetString("ActivityMonitorReentrancyCallOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reentrant call in an ActivityMonitor has been detected. A monitor usage must not trigger another operation on the same monitor..
        /// </summary>
        public static string ActivityMonitorReentrancyError {
            get {
                return ResourceManager.GetString("ActivityMonitorReentrancyError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal error: Error during release reentrancy operation. Thread id={0} entered whereas release is called from thread &apos;{1}&apos;, id={2}..
        /// </summary>
        public static string ActivityMonitorReentrancyReleaseError {
            get {
                return ResourceManager.GetString("ActivityMonitorReentrancyReleaseError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Tag (CKTrait) must be registered in ActivityMonitor.Tags..
        /// </summary>
        public static string ActivityMonitorTagMustBeRegistered {
            get {
                return ResourceManager.GetString("ActivityMonitorTagMustBeRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AggregatedExceptions must contain at least one exception..
        /// </summary>
        public static string AggregatedExceptionsMustContainAtLeastOne {
            get {
                return ResourceManager.GetString("AggregatedExceptionsMustContainAtLeastOne", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ApplicationSettings have already been initialized.It can be initialized only once..
        /// </summary>
        public static string AppSettingsAlreadyInitialized {
            get {
                return ResourceManager.GetString("AppSettingsAlreadyInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to initialize AppSettings, the default fallback to System.Configuration.ConfigurationManager.AppSettings can not be generated since System.Configuration assembly is not available..
        /// </summary>
        public static string AppSettingsDefaultInitializationFailed {
            get {
                return ResourceManager.GetString("AppSettingsDefaultInitializationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required AppSettings configuration named &apos;{0}&apos; is missising: it must be a &apos;{1}&apos;..
        /// </summary>
        public static string AppSettingsRequiredConfigurationBadType {
            get {
                return ResourceManager.GetString("AppSettingsRequiredConfigurationBadType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required AppSettings configuration named &apos;{0}&apos; is missising..
        /// </summary>
        public static string AppSettingsRequiredConfigurationMissing {
            get {
                return ResourceManager.GetString("AppSettingsRequiredConfigurationMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument count can not be negative..
        /// </summary>
        public static string ArgumentCountNegative {
            get {
                return ResourceManager.GetString("ArgumentCountNegative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument must not be null or whitespace..
        /// </summary>
        public static string ArgumentMustNotBeNullOrWhiteSpace {
            get {
                return ResourceManager.GetString("ArgumentMustNotBeNullOrWhiteSpace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prematurely closed by Bridge removed..
        /// </summary>
        public static string ClosedByBridgeRemoved {
            get {
                return ResourceManager.GetString("ClosedByBridgeRemoved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DateTime must be Utc. Use DateTime.UtcNow to obtain it for instance..
        /// </summary>
        public static string DateTimeMustBeUtc {
            get {
                return ResourceManager.GetString("DateTimeMustBeUtc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error handler raised the error. It has been removed from the CriticalErrorCollector.OnErrorFromBackgroundThreads event..
        /// </summary>
        public static string ErrorWhileCollectorRaiseError {
            get {
                return ResourceManager.GetString("ErrorWhileCollectorRaiseError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception occured while resolving type: {0}..
        /// </summary>
        public static string ExceptionWhileResolvingType {
            get {
                return ResourceManager.GetString("ExceptionWhileResolvingType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected attribute &apos;{0}&apos;..
        /// </summary>
        public static string ExpectedXmlAttribute {
            get {
                return ResourceManager.GetString("ExpectedXmlAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;factory&apos; function must create an item that satisfies the &apos;tester&apos; function..
        /// </summary>
        public static string FactoryTesterMismatch {
            get {
                return ResourceManager.GetString("FactoryTesterMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FIFOBuffer is empty..
        /// </summary>
        public static string FIFOBufferEmpty {
            get {
                return ResourceManager.GetString("FIFOBufferEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File must exist..
        /// </summary>
        public static string FileMustExist {
            get {
                return ResourceManager.GetString("FileMustExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access set to FileAccess.Read is stupid when creating a file..
        /// </summary>
        public static string FileUtilNoReadOnlyWhenCreateFile {
            get {
                return ResourceManager.GetString("FileUtilNoReadOnlyWhenCreateFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to create a unique timed file..
        /// </summary>
        public static string FileUtilUnableToCreateUniqueTimedFile {
            get {
                return ResourceManager.GetString("FileUtilUnableToCreateUniqueTimedFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The InnerException must be the first AggregatedExceptions..
        /// </summary>
        public static string InnerExceptionMustBeTheFirstAggregatedException {
            get {
                return ResourceManager.GetString("InnerExceptionMustBeTheFirstAggregatedException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0}&quot; is not a valid assembly qualified name..
        /// </summary>
        public static string InvalidAssemblyQualifiedName {
            get {
                return ResourceManager.GetString("InvalidAssemblyQualifiedName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to forward past the end of the string..
        /// </summary>
        public static string StringMatcherForwardPastEnd {
            get {
                return ResourceManager.GetString("StringMatcherForwardPastEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Traits must belong to the same context..
        /// </summary>
        public static string TraitsMustBelongToTheSameContext {
            get {
                return ResourceManager.GetString("TraitsMustBelongToTheSameContext", resourceCulture);
            }
        }
    }
}
