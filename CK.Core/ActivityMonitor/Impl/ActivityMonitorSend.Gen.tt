<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
#region LGPL License
/*----------------------------------------------------------------------------
* This file (CK.Core\ActivityMonitor\Impl\ActivityMonitorSend.cs and CK.Core\ActivityMonitor\Impl\ActivityMonitorSendGen.cs ) is part of CiviKey. 
*  
* CiviKey is free software: you can redistribute it and/or modify 
* it under the terms of the GNU Lesser General Public License as published 
* by the Free Software Foundation, either version 3 of the License, or 
* (at your option) any later version. 
*  
* CiviKey is distributed in the hope that it will be useful, 
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
* GNU Lesser General Public License for more details. 
* You should have received a copy of the GNU Lesser General Public License 
* along with CiviKey.  If not, see <http://www.gnu.org/licenses/>. 
*  
* Copyright © 2007-2012, 
*     Invenietis <http://www.invenietis.com>,
*     In’Tech INFO <http://www.intechinfo.fr>,
* All rights reserved. 
*-----------------------------------------------------------------------------*/
#endregion
//
// This file is generated by ActivityMonitorSend.Gen.tt
//
using System;
using System.Runtime.CompilerServices;

namespace CK.Core
{
    /// <summary>
    /// Provides Send extension methods for <see cref="ActivityMonitorLineSender"/> and <see cref="ActivityMonitorGroupSender"/>.
    /// </summary>
    public static class ActivityMonitorSendExtension
    {
		<# 
		while( NextState() ) 
		{ #> 
		#region Send logs<# 
			Write( WithTags ? " with tags" : "" ); 
			Write( WithException ? " with exception" : "" ); 
			for( int nbArg = 0; nbArg <= _maxExplicitArgument; ++nbArg ) 
			{ 
				if( nbArg > 0 || WithException ) 
				{ 
		#> 

		/// <summary>
        /// <# HeaderStandardComment( nbArg ); #>.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param><# StateArgumentComment(); #><# TextArgumentComment( nbArg ); #>
        static public void Send( this ActivityMonitorLineSender @this<# StateArgumentSignature(); #><# TextArgumentSignature( nbArg ); #> )
        {
            if( @this == null ) return;
			<# 
			if( nbArg == 2 && !WithException ) 
			{ 
			#>if( arg0 is Exception ) throw new ArgumentException( R.PossibleWrongOverloadUseWithException, "arg0" );
			<#
			}
			#>@this.InitializeAndSend( <# TextCall( nbArg ); #>, <# StateCall(); #>, DateTime.UtcNow );
        }
		<#	
				} 
			}
		#> 
		/// <summary>
        /// Sends a text obtained through a delegate<# HeaderStateComment(); #>.
		/// The delegate will be called only if the log is not filtered.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param><# StateArgumentComment(); #> 
        /// <param name="text">Function that returns a string. Must not be null.</param>
        public static void Send( this ActivityMonitorLineSender @this<# StateArgumentSignature(); #>, Func<string> text )
        {
            if( @this == null ) return;
            @this.InitializeAndSend( text(), <# StateCall(); #>, DateTime.UtcNow );
        }

		/// <summary>
        /// Sends a text obtained through a parameterized delegate<# HeaderStateComment(); #>.
		/// The delegate will be called only if the log is not filtered.
        /// </summary>
        /// <typeparam name="T">Type of the parameter that <paramref name="text"/> accepts.</typeparam>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param><# StateArgumentComment(); #> 
        /// <param name="text">Function that returns a string. Must not be null.</param>
        /// <param name="param">Parameter of the <paramref name="text"/> delegate.</param>
        public static void Send<T>( this ActivityMonitorLineSender @this<# StateArgumentSignature(); #>, Func<T,string> text, T param )
        {
            if( @this == null ) return;
            @this.InitializeAndSend( text(param), <# StateCall(); #>, DateTime.UtcNow );
        }

		/// <summary>
        /// Sends a text obtained through a parameterized delegate<# HeaderStateComment(); #>.
		/// The delegate will be called only if the log is not filtered.
        /// </summary>
        /// <typeparam name="T1">Type of the first parameter that <paramref name="text"/> accepts.</typeparam>
        /// <typeparam name="T2">Type of the second parameter that <paramref name="text"/> accepts.</typeparam>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param><# StateArgumentComment(); #> 
        /// <param name="text">Function that returns a string. Must not be null.</param>
        /// <param name="param1">First parameter for the <paramref name="text"/> delegate.</param>
        /// <param name="param2">Second parameter for the <paramref name="text"/> delegate.</param>
        public static void Send<T1,T2>( this ActivityMonitorLineSender @this<# StateArgumentSignature(); #>, Func<T1,T2,string> text, T1 param1, T2 param2 )
        {
            if( @this == null ) return;
            @this.InitializeAndSend( text(param1,param2), <# StateCall(); #>, DateTime.UtcNow );
        }

		/// <summary>
        /// Sends a log with a text obtained through a parameterized delegate<# HeaderStateComment(); #>.
		/// The delegate will be called only if the log is not filtered.
        /// </summary>
        /// <typeparam name="T1">Type of the first parameter that <paramref name="text"/> accepts.</typeparam>
        /// <typeparam name="T2">Type of the second parameter that <paramref name="text"/> accepts.</typeparam>
        /// <typeparam name="T3">Type of the third parameter that <paramref name="text"/> accepts.</typeparam>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param><# StateArgumentComment(); #> 
        /// <param name="text">Function that returns a string. Must not be null.</param>
        /// <param name="param1">First parameter for the <paramref name="text"/> delegate.</param>
        /// <param name="param2">Second parameter for the <paramref name="text"/> delegate.</param>
        /// <param name="param3">Third parameter for the <paramref name="text"/> delegate.</param>
        public static void Send<T1,T2,T3>( this ActivityMonitorLineSender @this<# StateArgumentSignature(); #>, Func<T1,T2,T3,string> text, T1 param1, T2 param2, T3 param3 )
        {
            if( @this == null ) return;
            @this.InitializeAndSend( text(param1,param2,param3), <# StateCall(); #>, DateTime.UtcNow );
        }

		#endregion<# 
			Write( WithTags ? " with tags" : "" ); 
			Write( WithException ? " with exception" : "" );
		} 
		#> 
	}
}
<#+
	const int _maxExplicitArgument = 6;
	int _state = -1;
	bool WithTags { get { return (_state & 1) != 0; } }
	bool WithException { get { return (_state & 2) != 0; } }

	bool NextState()
	{
		return ++_state < 4;
	}

	void HeaderStandardComment( int nbArg )
	{
		if( nbArg == 0 ) Write( @"Sends a log" );
		else if( nbArg == 1 ) Write( @"Sends a text" );
		else if( nbArg > 1 ) 
		{
			Write( @"Sends a formatted text" );
		}
		HeaderStateComment();
	}

	void HeaderStateComment()
	{
		if( WithTags ) 
		{ 
			Write( @" with associated tags" );
			if( WithException ) Write( @" and an exception" );
		}		
		else Write( @" with an exception" );
	}

	void StateArgumentComment()
	{
		if( WithTags ) Write( @"
		/// <param name=""tags"">Tags for the log.</param>" );
		if( WithException ) Write( @"
		/// <param name=""ex"">The exception. Must not be null.</param>" );
	}

	void StateArgumentSignature()
	{
		if( WithTags ) Write( ", CKTrait tags" );
		if( WithException ) Write( ", Exception ex" );
	}

	void StateCall()
	{
		Write( WithException ? "ex, " : "null, " );
		Write( WithTags ? "tags" : "ActivityMonitor.EmptyTag" );
	}

	void TextArgumentComment( int count )
	{
		if( --count >= 0 )
		{
			if( count == 0 ) Write( @"
		/// <param name=""text"">The text of the log.</param>" );
			else 
			{
				Write( @"
		/// <param name=""format"">The text format of the log with "+count.ToString()+@" placeholders.</param>" );
				if( count < _maxExplicitArgument-1 )
				{
					for( int i = 0; i < count; ++i )
					{
						Write( @"
		/// <param name=""arg"+i.ToString()+@""">Parameter to format (placeholder {"+i.ToString()+@"}).</param>" );
					}
				}
				else 
				{
						Write( @"
		/// <param name=""arguments"">Multiple parameters to format.</param>" );
				}
			}
		}
		Write( Environment.NewLine );
	}

	void TextArgumentSignature( int count )
	{
		if( --count >= 0 )
		{
			if( count == 0 ) Write( ", string text" );
			else 
			{
				Write( ", string format" );
				if( count < _maxExplicitArgument-1 )
				{
					for( int i = 0; i < count; ++i )
					{
						Write( ", object arg"+i.ToString() );
					}
				}
				else Write( ", params object[] arguments" );
			}
		}
	}

	void TextCall( int count )
	{
		--count;
		if( count == -1 ) Write( "null" );
		else if( count == 0 ) Write( "text" );
		else 
		{
			Write( "String.Format( format" );
			if( count < _maxExplicitArgument-1 )
			{
				for( int i = 0; i < count; ++i )
				{
					Write( ", arg"+i.ToString() );
				}
			}
			else Write( ", arguments" );
			Write( " )" );
		}
	}

#>
