#region LGPL License
/*----------------------------------------------------------------------------
* This file (CK.Core\ActivityMonitor\Impl\ActivityMonitorSend.cs and CK.Core\ActivityMonitor\Impl\ActivityMonitorSendGen.cs ) is part of CiviKey. 
*  
* CiviKey is free software: you can redistribute it and/or modify 
* it under the terms of the GNU Lesser General Public License as published 
* by the Free Software Foundation, either version 3 of the License, or 
* (at your option) any later version. 
*  
* CiviKey is distributed in the hope that it will be useful, 
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
* GNU Lesser General Public License for more details. 
* You should have received a copy of the GNU Lesser General Public License 
* along with CiviKey.  If not, see <http://www.gnu.org/licenses/>. 
*  
* Copyright © 2007-2012, 
*     Invenietis <http://www.invenietis.com>,
*     In’Tech INFO <http://www.intechinfo.fr>,
* All rights reserved. 
*-----------------------------------------------------------------------------*/
#endregion
//
// This file is generated by ActivityMonitorSend.Gen.tt
//
using System;
using System.Runtime.CompilerServices;

namespace CK.Core
{
    /// <summary>
    /// Provides Send extension methods for <see cref="ActivityMonitorLineSender"/> and <see cref="ActivityMonitorGroupSender"/>.
    /// </summary>
    public static class ActivityMonitorSendExtension
    {
		 
		#region Send logs 

		/// <summary>
        /// Sends a text with an exception.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="text">The text of the log.</param>
        static public void Send( this ActivityMonitorLineSender @this, string text )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( text, null, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a formatted text with an exception.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="format">The text format of the log with 1 placeholders.</param>
		/// <param name="arg0">Parameter to format (placeholder {0}).</param>
        static public void Send( this ActivityMonitorLineSender @this, string format, object arg0 )
        {
            if( @this == null ) return;
			if( arg0 is Exception ) throw new ArgumentException( R.PossibleWrongOverloadUseWithException, "arg0" );
			@this.InitializeAndSend( String.Format( format, arg0 ), null, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a formatted text with an exception.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="format">The text format of the log with 2 placeholders.</param>
		/// <param name="arg0">Parameter to format (placeholder {0}).</param>
		/// <param name="arg1">Parameter to format (placeholder {1}).</param>
        static public void Send( this ActivityMonitorLineSender @this, string format, object arg0, object arg1 )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( String.Format( format, arg0, arg1 ), null, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a formatted text with an exception.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="format">The text format of the log with 3 placeholders.</param>
		/// <param name="arg0">Parameter to format (placeholder {0}).</param>
		/// <param name="arg1">Parameter to format (placeholder {1}).</param>
		/// <param name="arg2">Parameter to format (placeholder {2}).</param>
        static public void Send( this ActivityMonitorLineSender @this, string format, object arg0, object arg1, object arg2 )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( String.Format( format, arg0, arg1, arg2 ), null, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a formatted text with an exception.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="format">The text format of the log with 4 placeholders.</param>
		/// <param name="arg0">Parameter to format (placeholder {0}).</param>
		/// <param name="arg1">Parameter to format (placeholder {1}).</param>
		/// <param name="arg2">Parameter to format (placeholder {2}).</param>
		/// <param name="arg3">Parameter to format (placeholder {3}).</param>
        static public void Send( this ActivityMonitorLineSender @this, string format, object arg0, object arg1, object arg2, object arg3 )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( String.Format( format, arg0, arg1, arg2, arg3 ), null, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a formatted text with an exception.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="format">The text format of the log with 5 placeholders.</param>
		/// <param name="arguments">Multiple parameters to format.</param>
        static public void Send( this ActivityMonitorLineSender @this, string format, params object[] arguments )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( String.Format( format, arguments ), null, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }
		 
		/// <summary>
        /// Sends a text obtained through a delegate with an exception.
		/// The delegate will be called only if the log is not filtered.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param> 
        /// <param name="text">Function that returns a string. Must not be null.</param>
        public static void Send( this ActivityMonitorLineSender @this, Func<string> text )
        {
            if( @this == null ) return;
            @this.InitializeAndSend( text(), null, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }

		/// <summary>
        /// Sends a text obtained through a parameterized delegate with an exception.
		/// The delegate will be called only if the log is not filtered.
        /// </summary>
        /// <typeparam name="T">Type of the parameter that <paramref name="text"/> accepts.</typeparam>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param> 
        /// <param name="text">Function that returns a string. Must not be null.</param>
        /// <param name="param">Parameter of the <paramref name="text"/> delegate.</param>
        public static void Send<T>( this ActivityMonitorLineSender @this, Func<T,string> text, T param )
        {
            if( @this == null ) return;
            @this.InitializeAndSend( text(param), null, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }

		/// <summary>
        /// Sends a text obtained through a parameterized delegate with an exception.
		/// The delegate will be called only if the log is not filtered.
        /// </summary>
        /// <typeparam name="T1">Type of the first parameter that <paramref name="text"/> accepts.</typeparam>
        /// <typeparam name="T2">Type of the second parameter that <paramref name="text"/> accepts.</typeparam>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param> 
        /// <param name="text">Function that returns a string. Must not be null.</param>
        /// <param name="param1">First parameter for the <paramref name="text"/> delegate.</param>
        /// <param name="param2">Second parameter for the <paramref name="text"/> delegate.</param>
        public static void Send<T1,T2>( this ActivityMonitorLineSender @this, Func<T1,T2,string> text, T1 param1, T2 param2 )
        {
            if( @this == null ) return;
            @this.InitializeAndSend( text(param1,param2), null, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }

		/// <summary>
        /// Sends a log with a text obtained through a parameterized delegate with an exception.
		/// The delegate will be called only if the log is not filtered.
        /// </summary>
        /// <typeparam name="T1">Type of the first parameter that <paramref name="text"/> accepts.</typeparam>
        /// <typeparam name="T2">Type of the second parameter that <paramref name="text"/> accepts.</typeparam>
        /// <typeparam name="T3">Type of the third parameter that <paramref name="text"/> accepts.</typeparam>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param> 
        /// <param name="text">Function that returns a string. Must not be null.</param>
        /// <param name="param1">First parameter for the <paramref name="text"/> delegate.</param>
        /// <param name="param2">Second parameter for the <paramref name="text"/> delegate.</param>
        /// <param name="param3">Third parameter for the <paramref name="text"/> delegate.</param>
        public static void Send<T1,T2,T3>( this ActivityMonitorLineSender @this, Func<T1,T2,T3,string> text, T1 param1, T2 param2, T3 param3 )
        {
            if( @this == null ) return;
            @this.InitializeAndSend( text(param1,param2,param3), null, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }

		#endregion 
		#region Send logs with tags 

		/// <summary>
        /// Sends a text with associated tags.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param>
		/// <param name="text">The text of the log.</param>
        static public void Send( this ActivityMonitorLineSender @this, CKTrait tags, string text )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( text, null, tags, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a formatted text with associated tags.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param>
		/// <param name="format">The text format of the log with 1 placeholders.</param>
		/// <param name="arg0">Parameter to format (placeholder {0}).</param>
        static public void Send( this ActivityMonitorLineSender @this, CKTrait tags, string format, object arg0 )
        {
            if( @this == null ) return;
			if( arg0 is Exception ) throw new ArgumentException( R.PossibleWrongOverloadUseWithException, "arg0" );
			@this.InitializeAndSend( String.Format( format, arg0 ), null, tags, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a formatted text with associated tags.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param>
		/// <param name="format">The text format of the log with 2 placeholders.</param>
		/// <param name="arg0">Parameter to format (placeholder {0}).</param>
		/// <param name="arg1">Parameter to format (placeholder {1}).</param>
        static public void Send( this ActivityMonitorLineSender @this, CKTrait tags, string format, object arg0, object arg1 )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( String.Format( format, arg0, arg1 ), null, tags, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a formatted text with associated tags.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param>
		/// <param name="format">The text format of the log with 3 placeholders.</param>
		/// <param name="arg0">Parameter to format (placeholder {0}).</param>
		/// <param name="arg1">Parameter to format (placeholder {1}).</param>
		/// <param name="arg2">Parameter to format (placeholder {2}).</param>
        static public void Send( this ActivityMonitorLineSender @this, CKTrait tags, string format, object arg0, object arg1, object arg2 )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( String.Format( format, arg0, arg1, arg2 ), null, tags, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a formatted text with associated tags.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param>
		/// <param name="format">The text format of the log with 4 placeholders.</param>
		/// <param name="arg0">Parameter to format (placeholder {0}).</param>
		/// <param name="arg1">Parameter to format (placeholder {1}).</param>
		/// <param name="arg2">Parameter to format (placeholder {2}).</param>
		/// <param name="arg3">Parameter to format (placeholder {3}).</param>
        static public void Send( this ActivityMonitorLineSender @this, CKTrait tags, string format, object arg0, object arg1, object arg2, object arg3 )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( String.Format( format, arg0, arg1, arg2, arg3 ), null, tags, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a formatted text with associated tags.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param>
		/// <param name="format">The text format of the log with 5 placeholders.</param>
		/// <param name="arguments">Multiple parameters to format.</param>
        static public void Send( this ActivityMonitorLineSender @this, CKTrait tags, string format, params object[] arguments )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( String.Format( format, arguments ), null, tags, DateTime.UtcNow );
        }
		 
		/// <summary>
        /// Sends a text obtained through a delegate with associated tags.
		/// The delegate will be called only if the log is not filtered.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param> 
        /// <param name="text">Function that returns a string. Must not be null.</param>
        public static void Send( this ActivityMonitorLineSender @this, CKTrait tags, Func<string> text )
        {
            if( @this == null ) return;
            @this.InitializeAndSend( text(), null, tags, DateTime.UtcNow );
        }

		/// <summary>
        /// Sends a text obtained through a parameterized delegate with associated tags.
		/// The delegate will be called only if the log is not filtered.
        /// </summary>
        /// <typeparam name="T">Type of the parameter that <paramref name="text"/> accepts.</typeparam>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param> 
        /// <param name="text">Function that returns a string. Must not be null.</param>
        /// <param name="param">Parameter of the <paramref name="text"/> delegate.</param>
        public static void Send<T>( this ActivityMonitorLineSender @this, CKTrait tags, Func<T,string> text, T param )
        {
            if( @this == null ) return;
            @this.InitializeAndSend( text(param), null, tags, DateTime.UtcNow );
        }

		/// <summary>
        /// Sends a text obtained through a parameterized delegate with associated tags.
		/// The delegate will be called only if the log is not filtered.
        /// </summary>
        /// <typeparam name="T1">Type of the first parameter that <paramref name="text"/> accepts.</typeparam>
        /// <typeparam name="T2">Type of the second parameter that <paramref name="text"/> accepts.</typeparam>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param> 
        /// <param name="text">Function that returns a string. Must not be null.</param>
        /// <param name="param1">First parameter for the <paramref name="text"/> delegate.</param>
        /// <param name="param2">Second parameter for the <paramref name="text"/> delegate.</param>
        public static void Send<T1,T2>( this ActivityMonitorLineSender @this, CKTrait tags, Func<T1,T2,string> text, T1 param1, T2 param2 )
        {
            if( @this == null ) return;
            @this.InitializeAndSend( text(param1,param2), null, tags, DateTime.UtcNow );
        }

		/// <summary>
        /// Sends a log with a text obtained through a parameterized delegate with associated tags.
		/// The delegate will be called only if the log is not filtered.
        /// </summary>
        /// <typeparam name="T1">Type of the first parameter that <paramref name="text"/> accepts.</typeparam>
        /// <typeparam name="T2">Type of the second parameter that <paramref name="text"/> accepts.</typeparam>
        /// <typeparam name="T3">Type of the third parameter that <paramref name="text"/> accepts.</typeparam>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param> 
        /// <param name="text">Function that returns a string. Must not be null.</param>
        /// <param name="param1">First parameter for the <paramref name="text"/> delegate.</param>
        /// <param name="param2">Second parameter for the <paramref name="text"/> delegate.</param>
        /// <param name="param3">Third parameter for the <paramref name="text"/> delegate.</param>
        public static void Send<T1,T2,T3>( this ActivityMonitorLineSender @this, CKTrait tags, Func<T1,T2,T3,string> text, T1 param1, T2 param2, T3 param3 )
        {
            if( @this == null ) return;
            @this.InitializeAndSend( text(param1,param2,param3), null, tags, DateTime.UtcNow );
        }

		#endregion with tags 
		#region Send logs with exception 

		/// <summary>
        /// Sends a log with an exception.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="ex">The exception. Must not be null.</param>
        static public void Send( this ActivityMonitorLineSender @this, Exception ex )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( null, ex, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a text with an exception.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="ex">The exception. Must not be null.</param>
		/// <param name="text">The text of the log.</param>
        static public void Send( this ActivityMonitorLineSender @this, Exception ex, string text )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( text, ex, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a formatted text with an exception.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="ex">The exception. Must not be null.</param>
		/// <param name="format">The text format of the log with 1 placeholders.</param>
		/// <param name="arg0">Parameter to format (placeholder {0}).</param>
        static public void Send( this ActivityMonitorLineSender @this, Exception ex, string format, object arg0 )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( String.Format( format, arg0 ), ex, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a formatted text with an exception.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="ex">The exception. Must not be null.</param>
		/// <param name="format">The text format of the log with 2 placeholders.</param>
		/// <param name="arg0">Parameter to format (placeholder {0}).</param>
		/// <param name="arg1">Parameter to format (placeholder {1}).</param>
        static public void Send( this ActivityMonitorLineSender @this, Exception ex, string format, object arg0, object arg1 )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( String.Format( format, arg0, arg1 ), ex, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a formatted text with an exception.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="ex">The exception. Must not be null.</param>
		/// <param name="format">The text format of the log with 3 placeholders.</param>
		/// <param name="arg0">Parameter to format (placeholder {0}).</param>
		/// <param name="arg1">Parameter to format (placeholder {1}).</param>
		/// <param name="arg2">Parameter to format (placeholder {2}).</param>
        static public void Send( this ActivityMonitorLineSender @this, Exception ex, string format, object arg0, object arg1, object arg2 )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( String.Format( format, arg0, arg1, arg2 ), ex, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a formatted text with an exception.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="ex">The exception. Must not be null.</param>
		/// <param name="format">The text format of the log with 4 placeholders.</param>
		/// <param name="arg0">Parameter to format (placeholder {0}).</param>
		/// <param name="arg1">Parameter to format (placeholder {1}).</param>
		/// <param name="arg2">Parameter to format (placeholder {2}).</param>
		/// <param name="arg3">Parameter to format (placeholder {3}).</param>
        static public void Send( this ActivityMonitorLineSender @this, Exception ex, string format, object arg0, object arg1, object arg2, object arg3 )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( String.Format( format, arg0, arg1, arg2, arg3 ), ex, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a formatted text with an exception.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="ex">The exception. Must not be null.</param>
		/// <param name="format">The text format of the log with 5 placeholders.</param>
		/// <param name="arguments">Multiple parameters to format.</param>
        static public void Send( this ActivityMonitorLineSender @this, Exception ex, string format, params object[] arguments )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( String.Format( format, arguments ), ex, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }
		 
		/// <summary>
        /// Sends a text obtained through a delegate with an exception.
		/// The delegate will be called only if the log is not filtered.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="ex">The exception. Must not be null.</param> 
        /// <param name="text">Function that returns a string. Must not be null.</param>
        public static void Send( this ActivityMonitorLineSender @this, Exception ex, Func<string> text )
        {
            if( @this == null ) return;
            @this.InitializeAndSend( text(), ex, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }

		/// <summary>
        /// Sends a text obtained through a parameterized delegate with an exception.
		/// The delegate will be called only if the log is not filtered.
        /// </summary>
        /// <typeparam name="T">Type of the parameter that <paramref name="text"/> accepts.</typeparam>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="ex">The exception. Must not be null.</param> 
        /// <param name="text">Function that returns a string. Must not be null.</param>
        /// <param name="param">Parameter of the <paramref name="text"/> delegate.</param>
        public static void Send<T>( this ActivityMonitorLineSender @this, Exception ex, Func<T,string> text, T param )
        {
            if( @this == null ) return;
            @this.InitializeAndSend( text(param), ex, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }

		/// <summary>
        /// Sends a text obtained through a parameterized delegate with an exception.
		/// The delegate will be called only if the log is not filtered.
        /// </summary>
        /// <typeparam name="T1">Type of the first parameter that <paramref name="text"/> accepts.</typeparam>
        /// <typeparam name="T2">Type of the second parameter that <paramref name="text"/> accepts.</typeparam>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="ex">The exception. Must not be null.</param> 
        /// <param name="text">Function that returns a string. Must not be null.</param>
        /// <param name="param1">First parameter for the <paramref name="text"/> delegate.</param>
        /// <param name="param2">Second parameter for the <paramref name="text"/> delegate.</param>
        public static void Send<T1,T2>( this ActivityMonitorLineSender @this, Exception ex, Func<T1,T2,string> text, T1 param1, T2 param2 )
        {
            if( @this == null ) return;
            @this.InitializeAndSend( text(param1,param2), ex, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }

		/// <summary>
        /// Sends a log with a text obtained through a parameterized delegate with an exception.
		/// The delegate will be called only if the log is not filtered.
        /// </summary>
        /// <typeparam name="T1">Type of the first parameter that <paramref name="text"/> accepts.</typeparam>
        /// <typeparam name="T2">Type of the second parameter that <paramref name="text"/> accepts.</typeparam>
        /// <typeparam name="T3">Type of the third parameter that <paramref name="text"/> accepts.</typeparam>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="ex">The exception. Must not be null.</param> 
        /// <param name="text">Function that returns a string. Must not be null.</param>
        /// <param name="param1">First parameter for the <paramref name="text"/> delegate.</param>
        /// <param name="param2">Second parameter for the <paramref name="text"/> delegate.</param>
        /// <param name="param3">Third parameter for the <paramref name="text"/> delegate.</param>
        public static void Send<T1,T2,T3>( this ActivityMonitorLineSender @this, Exception ex, Func<T1,T2,T3,string> text, T1 param1, T2 param2, T3 param3 )
        {
            if( @this == null ) return;
            @this.InitializeAndSend( text(param1,param2,param3), ex, ActivityMonitor.EmptyTag, DateTime.UtcNow );
        }

		#endregion with exception 
		#region Send logs with tags with exception 

		/// <summary>
        /// Sends a log with associated tags and an exception.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param>
		/// <param name="ex">The exception. Must not be null.</param>
        static public void Send( this ActivityMonitorLineSender @this, CKTrait tags, Exception ex )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( null, ex, tags, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a text with associated tags and an exception.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param>
		/// <param name="ex">The exception. Must not be null.</param>
		/// <param name="text">The text of the log.</param>
        static public void Send( this ActivityMonitorLineSender @this, CKTrait tags, Exception ex, string text )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( text, ex, tags, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a formatted text with associated tags and an exception.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param>
		/// <param name="ex">The exception. Must not be null.</param>
		/// <param name="format">The text format of the log with 1 placeholders.</param>
		/// <param name="arg0">Parameter to format (placeholder {0}).</param>
        static public void Send( this ActivityMonitorLineSender @this, CKTrait tags, Exception ex, string format, object arg0 )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( String.Format( format, arg0 ), ex, tags, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a formatted text with associated tags and an exception.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param>
		/// <param name="ex">The exception. Must not be null.</param>
		/// <param name="format">The text format of the log with 2 placeholders.</param>
		/// <param name="arg0">Parameter to format (placeholder {0}).</param>
		/// <param name="arg1">Parameter to format (placeholder {1}).</param>
        static public void Send( this ActivityMonitorLineSender @this, CKTrait tags, Exception ex, string format, object arg0, object arg1 )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( String.Format( format, arg0, arg1 ), ex, tags, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a formatted text with associated tags and an exception.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param>
		/// <param name="ex">The exception. Must not be null.</param>
		/// <param name="format">The text format of the log with 3 placeholders.</param>
		/// <param name="arg0">Parameter to format (placeholder {0}).</param>
		/// <param name="arg1">Parameter to format (placeholder {1}).</param>
		/// <param name="arg2">Parameter to format (placeholder {2}).</param>
        static public void Send( this ActivityMonitorLineSender @this, CKTrait tags, Exception ex, string format, object arg0, object arg1, object arg2 )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( String.Format( format, arg0, arg1, arg2 ), ex, tags, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a formatted text with associated tags and an exception.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param>
		/// <param name="ex">The exception. Must not be null.</param>
		/// <param name="format">The text format of the log with 4 placeholders.</param>
		/// <param name="arg0">Parameter to format (placeholder {0}).</param>
		/// <param name="arg1">Parameter to format (placeholder {1}).</param>
		/// <param name="arg2">Parameter to format (placeholder {2}).</param>
		/// <param name="arg3">Parameter to format (placeholder {3}).</param>
        static public void Send( this ActivityMonitorLineSender @this, CKTrait tags, Exception ex, string format, object arg0, object arg1, object arg2, object arg3 )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( String.Format( format, arg0, arg1, arg2, arg3 ), ex, tags, DateTime.UtcNow );
        }
		 

		/// <summary>
        /// Sends a formatted text with associated tags and an exception.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param>
		/// <param name="ex">The exception. Must not be null.</param>
		/// <param name="format">The text format of the log with 5 placeholders.</param>
		/// <param name="arguments">Multiple parameters to format.</param>
        static public void Send( this ActivityMonitorLineSender @this, CKTrait tags, Exception ex, string format, params object[] arguments )
        {
            if( @this == null ) return;
			@this.InitializeAndSend( String.Format( format, arguments ), ex, tags, DateTime.UtcNow );
        }
		 
		/// <summary>
        /// Sends a text obtained through a delegate with associated tags and an exception.
		/// The delegate will be called only if the log is not filtered.
        /// </summary>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param>
		/// <param name="ex">The exception. Must not be null.</param> 
        /// <param name="text">Function that returns a string. Must not be null.</param>
        public static void Send( this ActivityMonitorLineSender @this, CKTrait tags, Exception ex, Func<string> text )
        {
            if( @this == null ) return;
            @this.InitializeAndSend( text(), ex, tags, DateTime.UtcNow );
        }

		/// <summary>
        /// Sends a text obtained through a parameterized delegate with associated tags and an exception.
		/// The delegate will be called only if the log is not filtered.
        /// </summary>
        /// <typeparam name="T">Type of the parameter that <paramref name="text"/> accepts.</typeparam>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param>
		/// <param name="ex">The exception. Must not be null.</param> 
        /// <param name="text">Function that returns a string. Must not be null.</param>
        /// <param name="param">Parameter of the <paramref name="text"/> delegate.</param>
        public static void Send<T>( this ActivityMonitorLineSender @this, CKTrait tags, Exception ex, Func<T,string> text, T param )
        {
            if( @this == null ) return;
            @this.InitializeAndSend( text(param), ex, tags, DateTime.UtcNow );
        }

		/// <summary>
        /// Sends a text obtained through a parameterized delegate with associated tags and an exception.
		/// The delegate will be called only if the log is not filtered.
        /// </summary>
        /// <typeparam name="T1">Type of the first parameter that <paramref name="text"/> accepts.</typeparam>
        /// <typeparam name="T2">Type of the second parameter that <paramref name="text"/> accepts.</typeparam>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param>
		/// <param name="ex">The exception. Must not be null.</param> 
        /// <param name="text">Function that returns a string. Must not be null.</param>
        /// <param name="param1">First parameter for the <paramref name="text"/> delegate.</param>
        /// <param name="param2">Second parameter for the <paramref name="text"/> delegate.</param>
        public static void Send<T1,T2>( this ActivityMonitorLineSender @this, CKTrait tags, Exception ex, Func<T1,T2,string> text, T1 param1, T2 param2 )
        {
            if( @this == null ) return;
            @this.InitializeAndSend( text(param1,param2), ex, tags, DateTime.UtcNow );
        }

		/// <summary>
        /// Sends a log with a text obtained through a parameterized delegate with associated tags and an exception.
		/// The delegate will be called only if the log is not filtered.
        /// </summary>
        /// <typeparam name="T1">Type of the first parameter that <paramref name="text"/> accepts.</typeparam>
        /// <typeparam name="T2">Type of the second parameter that <paramref name="text"/> accepts.</typeparam>
        /// <typeparam name="T3">Type of the third parameter that <paramref name="text"/> accepts.</typeparam>
        /// <param name="this">This <see cref="ActivityMonitorLineSender"/> object.</param>
		/// <param name="tags">Tags for the log.</param>
		/// <param name="ex">The exception. Must not be null.</param> 
        /// <param name="text">Function that returns a string. Must not be null.</param>
        /// <param name="param1">First parameter for the <paramref name="text"/> delegate.</param>
        /// <param name="param2">Second parameter for the <paramref name="text"/> delegate.</param>
        /// <param name="param3">Third parameter for the <paramref name="text"/> delegate.</param>
        public static void Send<T1,T2,T3>( this ActivityMonitorLineSender @this, CKTrait tags, Exception ex, Func<T1,T2,T3,string> text, T1 param1, T2 param2, T3 param3 )
        {
            if( @this == null ) return;
            @this.InitializeAndSend( text(param1,param2,param3), ex, tags, DateTime.UtcNow );
        }

		#endregion with tags with exception 
	}
}
